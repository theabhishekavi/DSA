131. Palindrome Partitioning

Given a string s, partition s such that every substring of the partition is a palindrome.

Return all possible palindrome partitioning of s.

Example:

Input: "aab"
Output:
[
  ["aa","b"],
  ["a","a","b"]
]



class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<>();
        List<String> temp = new ArrayList<>();
        partionHelper(s,temp,res,0);
        return res;
    }
    
    void partionHelper(String s, List<String> temp,List<List<String>> res, int start){
        if(start == s.length()){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i = start;i<s.length();i++){
            if(isPalindrome(s,start,i)){
                temp.add(s.substring(start,i+1));
                partionHelper(s,temp,res,i+1);
                temp.remove(temp.size()-1);
            }
        }
    }
    
    boolean isPalindrome(String s ,int start,int end){
        while(start<=end){
            if(s.charAt(start)!=s.charAt(end))
                return false;
            start++;
            end--;
        }
        return true;
    }
}