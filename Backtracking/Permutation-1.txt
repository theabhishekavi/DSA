Given a collection of distinct integers, return all possible permutations.



Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]



class Solution {

    public List<List<Integer>> permute(int[] nums) {
       List<List<Integer>> res = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        // Arrays.sort(nums);
        permuteHelper(res,temp,nums,visited);
        return res;
    }


    void permuteHelper(List<List<Integer>> res,List<Integer> temp,int[] nums,boolean[] visited){
         if(temp.size()==nums.length){
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int i = 0;i<nums.length;i++){
            if(visited[i])
                continue;
            visited[i] = true;
            temp.add(nums[i]);
            permuteHelper(res,temp,nums,visited);
            visited[i] = false;
            temp.remove(temp.size()-1);
           
        }
    }
}